(*
  File name: Mouse.simba
  Description: Mouse procedures and functions
  Authors: Benland100, Officer Barbrady
*)

{$include_once math.simba}

(*
  Author: Benland100
  Description: Calculates mouse path
*)

procedure WindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: extended);
var
  veloX, veloY, windX, windY, veloMag, dist, randomDist, lastDist, step: extended;
  lastX, lastY: integer;
  sqrt2, sqrt3, sqrt5: extended;
begin
  try
    sqrt2:= sqrt(2);
    sqrt3:= sqrt(3);
    sqrt5:= sqrt(5);
    while hypot(xs - xe, ys - ye) > 1 do
    begin
      dist:= hypot(xs - xe, ys - ye);
      wind:= minE(wind, dist);
      if dist >= targetArea then
      begin
        windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
        windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      end else
      begin
        windX:= windX / sqrt2;
        windY:= windY / sqrt2;
        if (maxStep < 3) then
        begin
          maxStep:= random(3) + 3.0;
        end else
        begin
          maxStep:= maxStep / sqrt5;
        end;
      end;
      veloX:= veloX + windX;
      veloY:= veloY + windY;
      veloX:= veloX + gravity * (xe - xs) / dist;
      veloY:= veloY + gravity * (ye - ys) / dist;
      if hypot(veloX, veloY) > maxStep then
      begin
        randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
        veloMag:= sqrt(veloX * veloX + veloY * veloY);
        veloX:= (veloX / veloMag) * randomDist;
        veloY:= (veloY / veloMag) * randomDist;
      end;
      lastX:= Round(xs);
      lastY:= Round(ys);
      xs:= xs + veloX;
      ys:= ys + veloY;
      if (lastX <> Round(xs)) or (lastY <> Round(ys)) then
        MoveMouse(Round(xs), Round(ys));
      step:= hypot(xs - lastX, ys - lastY);
      wait(round((maxWait - minWait) * (step / maxStep) + minWait));
      lastdist:= dist;
    end;
    if (Round(xe) <> Round(xs)) or (Round(ye) <> Round(ys)) then
      MoveMouse(Round(xe), Round(ye));
  except
  end;
end;

(*
  Author: Benland100
  Description: Calculates mouse path and moves mouse
*)

procedure MMouse(x, y, rx, ry: integer);
var
  cx, cy : integer;
  randSpeed: Extended;
  {$IFDEF UseLaptopMouse}
    seg, e, f, g, nx, ny, hypo: Integer;
    a, b, c: Extended;
    Miss: Boolean;
  {$ENDIF}
begin
  GetMousePos(cx, cy);
  {$IFDEF UseLaptopMouse}
    miss := (Random(LMouse_MissChance) = 0);
    e:= 0;
    a:= x - cx;
    b:= y - cy;
    c:= Pow(a,2) + Pow(b,2)
    hypo:= Round(Sqrt(c));
    case hypo of
      0: Exit;
      1..225: seg:=1;
      226..600: seg:= Random(2) + 1;
      601..1800: seg:= random(3) + 2;
      else seg := 5;
    end;
    f := Round( a / seg);
    g := Round( b / seg);
    repeat
      Wait(30 + random(50));
    {Begin: Modified from MMouse by Benland100}
      randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
      if randSpeed = 0.0 then
        randSpeed := 0.1;
      getMousePos(cx,cy);
      nx:= (cx + (f * e)) + random(rx);
      ny:= (cy + (g * e)) + random(ry);
    {End: Modified from MMouse by Benland100}
      if Miss then
      begin
        nx:= nx + RandomRange(rx, rx * 2);
        ny:= ny + RandomRange(ry, ry * 2);
      end;
      WindMouse(cx,cy,nx,ny,11.0,8.0,10.0/randSpeed,12.0/randSpeed,10.0*randSpeed,10.0*randSpeed);
      e:= e + 1;
    until(e = seg);
    GetMousePos(cx, cy);
    if not PointInBox(Point(cx, cy), IntToBox(x, y, x + rx, y + ry)) then
    begin
      Wait(30 + random(30));
      WindMouse(cx,cy,(x + random(rx)),(y + random(ry)),11.0,6.0,10.0/randSpeed,15.0/randSpeed,10.0*randSpeed,10.0*randSpeed);
    end;
  {$ELSE}
    randSpeed:= (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
    if randSpeed = 0.0 then
      randSpeed := 0.1;
    X := x + random(rx);
    Y := y + random(ry);
    WindMouse(cx,cy,x,y,9.0,3.0,10.0/randSpeed,15.0/randSpeed,10.0*randSpeed,10.0*randSpeed);
  {$ENDIF}
end;

(*
  Author: Officer Barbrady
  Description: moves the mouse (no randomness)
*)

procedure mmouse(x, y:Integer);overload;
begin
  mmouse(x, y, 0, 0);
end;

(*
  Author: ??
  Description: Detirmines whether or not a variant is a boolean
*)

function VariantIsBoolean(const v: Variant): Boolean;
begin
  Result := VarType(v) = varBoolean;
end;

(*
  Author: ??
  Description: Clicks the mouse with randomness
*)

procedure ClickMouse2(button: variant);
var
  a,b,c : integer;
  iButton: Integer;
begin
  { Eventually, should be made to just use Integers }
  if VariantIsBoolean(button) then
  begin
    if (button) then
      iButton := mouse_left
    else
      iButton := mouse_right;
  end else
    iButton := button;

  if (iButton = mouse_move) then Exit; { we aren't actually clicking! }

  GetMousePos(b, c);

  HoldMouse(b, c, iButton);
  repeat
    Wait(20 + Random(30));
    a := a + 1;
  until (a > 4);
  GetMousePos(b, c);
  ReleaseMouse(b, c, iButton);
  Wait(50+Random(50));
end;

(*
  Author: ??
  Description: Clicks the mouse
*)

procedure Mouse(mousex, mousey, ranx, rany: Integer; button: variant);
begin
  MMouse(mousex, mousey, ranx, rany);
  Wait(60 + Random(30));
  ClickMouse2(button);
  Wait(50 + Random(50));
end;

(*
  Author: ??
  Description: Clicks the mouse
*)

procedure Mouse(mousex, mousey: Integer; button: variant);overload;
begin
  MMouse(mousex, mousey, 0, 0);
  Wait(60 + Random(30));
  ClickMouse2(button);
  Wait(50 + Random(50));
end;

(*
  Author: ??
  Description: Clicks the mouse (for choose options?_)
*)

procedure Mouse(mousex, mousey: Integer; button: fnct_actionOptions);overload;
begin
  MMouse(mousex, mousey, 0, 0);
  Wait(60 + Random(30));
  ClickMouse2(1);
  Wait(50 + Random(50));
end;

(*
  Author: Officer Barbrady
  Description: Clicks the mouse, no randomness
*)

procedure Mouse(mousex, mousey: Integer)overload;
begin
  Mouse(mousex, mousey, 0, 0, mouse_left);
end;

(*
  Author: ??
  Description: Clicks randomly in a box
*)

procedure MouseBoxEx(x1, y1, x2, y2: Integer; Dist,ClickType: Integer);
var
  PT : TPoint;
begin
  GetMousePos(pt.x,pt.y);
  PT := RandomPointBoxEx(pt,inttobox(x1,y1,x2,y2),Dist);
  case ClickType of
    mouse_right..mouse_middle : Mouse(pt.x, pt.y, 0, 0, clickType);
    mouse_move : MMouse(pt.x, pt.y, 0, 0);
  else
    writeLn('MouseBox ', ' ClickType is NOT a valid number!');
  end;
end;

function DidClick(Red: Boolean; Time: integer): boolean;
var
  TimeOut, x, y, w, h, R, G: integer;
  B: TBox;
begin
  GetMousePos(x, y);
  GetClientDimensions(w, h);
  B := IntToBox(x - 15, y - 15, x + 15, y + 15);
  if B.x1 < 0 then B.x1 := 0;
  if B.y1 < 0 then B.y1 := 0;
  if B.x2 > w then B.x2 := w;
  if B.y2 > h then B.y2 := h;
  TimeOut := GetSystemTime + Time;
  while (GetSystemTime < TimeOut) do
  begin
    R := CountColorTolerance(255, B.x1, B.y1, B.x2, B.y2, 5);
    G := CountColorTolerance(1695663, B.x1, B.y1, B.x2, B.y2, 15);
    if Red then
    begin
      if (G > 8) then
        Exit;
      Result := (R > 20);
    end else
    begin
      if (R > 5) then
        Exit;
      Result := (G > 35);
    end;
    if Result then
      Exit;
  end;
end;
