(*
  File name: Simba.simba
  Description: Contains functions that are called within simba, and extra overloaded
  functions
  Authors: Officer Barbrady
*)

const
  Time_Formal = 0;
  Time_Short  = 1;
  Time_Abbrev = 2;
  Time_Bare   = 3;
  Time_FStop  = 4;


(*
  Author: ??
  Description: wait for an option
*)

function _rsps_server.WaitOptionMulti(S: TStringArray; TextType: string; Action: fnct_ActionOptions; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if (self.chooseOptionMulti(S, TextType, Action)) then
      exit(true);
    Wait(20 + Random(10));
  end;
end;

(*
  by Starblaster100 & Nielsie95 & Freddy1990, modified by Officer Barbrady
  Description: Checks for uptext (multiple)
*)
function _rsps_server.IsUpTextMulti(Text: TStringArray): Boolean;
var
  TheText: string;
  i: Integer;
begin
  TheText := self.getUpText;
  for i := 0 to High(Text) do
    if (Pos(Text[i], TheText) > 0) then
      exit(true);
end;

(*
  Author: ??
  Description: waits for an option
*)

function _rsps_server.waitOptionMulti(S: TStringArray; Time: Integer): Boolean; overload;
begin
  Result := self.waitOptionMulti(S, 'all', ClickLeft, Time);
end;

(*
  by Marpis edited by N1ke!
  Description: Waits for a uptext to appear (multiple)
*)

function _rsps_server.waitUpTextMulti(S: TStringArray; Time: Integer): Boolean;
var
  T: Integer;
begin
  result := false;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if (self.IsUpTextMulti(S)) then
      exit(true)
    else
      Wait(20 + Random(20));
  end;
end;
(*
  by Simba Development Team.
  Description: Checks for uptext
*)
function _rsps_server.IsUpText(UpText: string): Boolean;
begin
  Result := (Pos(UpText, self.GetUpText) > 0);
end;

(*
  by Marpis edited by N1ke!
  Description: Waits for a uptext to appear
*)

function _rsps_server.waitUptext(S: string; Time: Integer): Boolean;
begin
  Result := self.waitUptextMulti([S], Time);
end;

(*
  Author: Rasta Magician, small edit by EvilChicken!
  Description: waits until a function returns true
*)

function WaitFunc(Func: function: Boolean; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if (Func()) then
      exit(true);
    Wait(WaitPerLoop);
  end;
end;

(*
  Author: Officer Barbrady
  Description: marks system time in a var
*)

procedure markTime(var t:Integer);
begin
  t := getSystemTime;
end;

(*
  Author: Officer Barbrady
  Description: Returns time from a mark
*)

function timeFromMark(i:Integer):Integer;
begin
  result := i - getSystemTime;
end;

(*
  Author: Zephyrsfury, Nava2 and Rasta Magician.
  Description: Converts ms to normal time
*)
function MsToTime(MS, TheType: Integer): string;
var
  STA: array [0..4] of TVariantArray;
  Time: array [0..2] of Integer;
  i: Integer;
begin
  Result := '';
  if (not(InRange(TheType, 0, High(STA)))) then
  begin
    writeln('MsToTime', 'TheType: ''' + IntToStr(TheType) + ''' is not a valid value. Using Time_Bare.');
    TheType := Time_Bare;
  end;
  STA[Time_Formal] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Time_Short] := ['h ', 'm ', 's', False, 2];
  STA[Time_Abbrev] := [' hr ', ' min ', ' sec', False, 0];
  STA[Time_Bare] := [':', ':', '', True, 2];
  STA[Time_FStop] := ['.', '.', '', True, 2];
  ConvertTime(MS, Time[0], Time[1], Time[2]);
  for i := 0 to 2 do
    if (Time[i] > 0) or (STA[TheType][3]) or (i = 2) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[TheType][4]) + STA[TheType][i];
end;

(*
  Author: Rasta Magician.
  Description: Returns time in string (normal format)
*)
function TimeRunning: string;
begin
  Result := MsToTime(GetTimeRunning, Time_Formal);
end;
