{$include_once mouse.simba}
{$include_once gametab.simba}

(*
  File name: inventory.simba
  Description: Contains functions that return information about the inventory
  Authors: Janilabo, Officer Barbrady
*)

type
  rsps_inventory = record(rsps_interface)
    slots:TboxArray;
    outline:Integer;
  end;

var
  inventory:rsps_inventory;

(*
  Author: Janilabo
  Description: Returns the center of a box
*)

function rsps_inventory.boxCenter(bx: TBox): TPoint;
begin
  if ((bx.X1 > bx.X2) or (bx.Y1 > bx.Y2)) then
  begin
    if (bx.X1 > bx.X2) then
      Swap(bx.X1, bx.X2);
    if (bx.Y1 > bx.Y2) then
      Swap(bx.Y1, bx.Y2);
  end;
  Result := Point(Round(bx.X1 + ((bx.X2 - bx.X1) div 2)), Round(bx.Y1 + ((bx.Y2 - bx.Y1) div 2)));
end;

(*
  Author: Janilabo
  Description: Returns an array of boxes based off the bounds of a box and the rows
  and columns inputed
*)

function rsps_inventory.explodeBox(bx: TBox; rows, columns: integer): TBoxArray;
var
  r, c, w, h, ew, eh, ow, oh, i, x, y: integer;
begin
  if ((rows > 0) and (columns > 0) and (bx.X1 <= bx.X2) and (bx.Y1 <= bx.Y2)) then
  begin
    w := ((bx.X2 - bx.X1) + 1);
    h := ((bx.Y2 - bx.Y1) + 1);
    if (rows < 1) then
      rows := 1
    else
      if (rows > h) then
        rows := h;
    if (columns < 1) then
      columns := 1
    else
      if (columns > w) then
        columns := w;
    w := (w div columns);
    h := (h div rows);
    ew := (((bx.X2 - bx.X1) + 1) - (w * columns));
    eh := (((bx.Y2 - bx.Y1) + 1) - (h * rows));
    SetLength(result, (rows * columns));
    y := bx.Y1;
    for r := 0 to (rows - 1) do
    begin
      x := bx.X1;
      if ((eh > 0) and (r < eh)) then
        oh := 1
      else
        oh := 0;
      for c := 0 to (columns - 1) do
      begin
        if ((ew > 0) and (c < ew)) then
          ow := 1
        else
          ow := 0;
        i := ((r * columns) + c);
        result[i].X1 := x;
        result[i].X2 := (x + (w - 1) + ow);
        result[i].Y1 := y;
        result[i].Y2 := (y + (h - 1) + oh);
        x := (Result[i].X2 + 1);
      end;
      y := (result[i].Y2 + 1);
    end;
  end else
    SetLength(result, 0);
end;

(*
  Author: Officer Barbrady
  Description: Returns the inventory array of boxes to be used
*)

procedure rsps_inventory.setUp(b:tbox);
begin
  self.bounds := b;
  self.slots := self.explodeBox(b, 7, 4);
end;

(*
  Author: Officer Barbrady
  Description: Sets up the information to be used for the inventory based off
  the server revision
*)

procedure rsps_inventory.Init(rev:Integer);
begin
  case rev of
    317..507:
    with self do
    begin
      outline := 65536;
      setUp(IntToBox(563, 214, 720, 460));
      bounds := intToBox(0, 0, 0, 0);
      name := '317 inventory';
    end;
    507..719:
    with self do
    begin
      outline := 65536;
      setUp(IntToBox(563, 214, 720, 460));
      bounds := intToBox(0, 0, 0, 0);
      name := '508 inventory';
    end;
    720..800:
    with self do
    begin
      outline := 131072;
      setUp(IntToBox(568, 213, 717, 458));
      bounds := intToBox(568, 213, 717, 458);
      name := '724 inventory';
    end;
  end;
end;

(*
  Author: Officer Barbrady
  Description: Checks if a slot in the inventory is full
*)

function rsps_inventory.slotFull(slot:Integer):Boolean;
var
  x, y:Integer;
begin   //65536
  result := false;
  if FindColor(x, y, self.outline, self.slots[slot].x1, self.slots[slot].y1, self.slots[slot].x2, self.slots[slot].y2) or
    FindColor(x, y, 65536, self.slots[slot].x1, self.slots[slot].y1, self.slots[slot].x2, self.slots[slot].y2) then
      result := true;
end;

(*
  Author: Officer Barbrady
  Description: Returns how many items are in the inventory
*)

function rsps_inventory.count:Integer;
var
  i:Integer;
begin
  result := 0;
  for i := 0 to high(self.slots) do
    if self.slotFull(i) then
      result := result + 1;
end;

(*
  Author: Officer Barbrady
  Description: Returns whether the inventory is full or not
*)

function rsps_inventory.full:Boolean;
begin
  result := false;
  exit(self.count = 28);
end;

(*
  Author: Officer Barbrady
  Description: Interacts with an item in the inventory
*)

procedure rsps_inventory.interactItem(slot:Integer; Button:Integer);
begin
  mouse(self.boxCenter(self.slots[slot]).x, self.boxCenter(self.slots[slot]).y, 0, 0, BUTTON);
end;

(*
  Author: Officer Barbrady
  Description: Searches for a bitmap in the inventory
*)

function rsps_inventory.searchBitmap(BMPSearch, tol:Integer;click, cont:Boolean):Boolean;
var
  i, x, y:Integer;
begin
  result := false;
  for i := 0 to high(self.slots) do
  begin
    If FindBitmaptoleranceIn(BMPsearch, x, y, self.slots[i].X1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2, tol) then
    begin
      result := true;
      if click then
        self.interactItem(i, left);
      if not cont then
        exit;
    end;
  end;
end;

(*
  Author: Officer Barbrady
  Description: Counts number of bitmaps in the inventory
*)

function rsps_inventory.countBitmap(bmpSearch, tol:Integer):Integer;
var
  i, x, y:Integer;
begin
  for i := 0 to high(self.slots) do
    if FindBitmaptoleranceIn(BMPsearch, x, y, self.slots[i].X1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2, tol) then
      result := result + 1;
end;

(*
  Author: Officer Barbrady
  Description: Counts number of DTMs in the inventory
*)

function rsps_inventory.countDTM(DTMSearch:Integer):Integer;
var
  i, x, y:Integer;
begin
  result := 0;
  for i := 0 to high(self.slots) do
    if FindDTM(DTMSearch, x, y, self.slots[i].x1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2) then
      result := result + 1;
end;

(*
  Author: Officer Barbrady
  Description: Searches for a DTM in the inventory
*)

function rsps_inventory.searchDTM(DTMSearch:Integer;click, cont:Boolean;button:Integer):Boolean;
var
  I, x, y:Integer;
begin
  result := false;
  for i := 0 to high(self.slots) do
  begin
    if FindDTM(DTMSearch, x, y, self.slots[i].x1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2) then
    begin
      result := true;
      if click then
        self.interactItem(i, left);
      if not cont then
        exit;
    end;
  end;
end;

(*
  Author: Officer Barbrady
  Description: Searches for a DTM in the inventory, clicks by defualt
*)

function rsps_inventory.searchDTM(DTMSearch:Integer;cont:Boolean;button:Integer):Boolean; overload;
var
  I, x, y:Integer;
begin
  result := false;
  for i := 0 to high(self.slots) do
  begin
    if FindDTM(DTMSearch, x, y, self.slots[i].x1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2) then
    begin
      result := true;
      self.interactItem(i, left);
      if not cont then
        exit;
    end;
  end;
end;

(*
  Author: Officer Barbrady
  Description: Searches for a DTM in the inventory, clicks by defualt and exits
*)

function rsps_inventory.searchDTM(DTMSearch:Integer;button:Integer):Boolean; overload;
var
  I, x, y:Integer;
begin
  result := false;
  for i := 0 to high(self.slots) do
  begin
    if FindDTM(DTMSearch, x, y, self.slots[i].x1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2) then
    begin
      self.interactItem(i, button);
      exit(true);
    end;
  end;
end;

(*
  Author: Officer Barbrady
  Description: Returns amount of item in a slot
*)

function rsps_inventory.itemAmount(slot:integer):integer;
begin
  if (not gameTab(TAB_INV)) then
    gameTab(TAB_INV);
  result := getAmountBox(self.slots[slot]);
end;

(*
  Author: Officer Barbrady
  Description: Returns total count of all items
*)

function rsps_inventory.totalItemAmount:Int64;
var
  i:integer;
begin
  if (not gameTab(TAB_INV)) then
    gameTab(TAB_INV);
  for i := 0 to 27 do
    result := result + self.itemAmount(i);
end;

(*
  Author: Officer Barbrady
  Description: Returns where in the inventory a dtm is
*)

function rsps_inventory.DTMPosition(model:integer):integer;
var
  i, x, y:integer;
begin
  if (not gameTab(TAB_INV)) then
    gameTab(TAB_INV);
  for i := 0 to 27 do
    if findDTM(x, y, model, self.slots[i].x1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2) then
      exit(i);
end;

(*
  Author: Officer Barbrady
  Description: Returns where in the inventory a bitmap is
*)

function rsps_inventory.bitmapPosition(bmp, tol:integer):integer;
var
  i, x, y:integer;
begin
  if (not gameTab(TAB_INV)) then
    gameTab(TAB_INV);
  for i := 0 to 27 do
    if findBitmapToleranceIn(x, y, bmp, self.slots[i].x1, self.slots[i].y1, self.slots[i].x2, self.slots[i].y2, tol) then
      exit(i);
end;

(*
  Author: Officer Barbrady
  Description: Gets the name of an item in a slow
*)

function rsps_inventory.getItemName(slot:integer):string;
var
  p:TPoint;
begin
  if (not self.slotFull(slot)) then
    exit('')
  else
  begin
    p := boxCenter(self.slots[slot]);
    mmouse(p.x, p.y, 0, 0);
    result := getSimpleText([4231423], 7, 62, 255, 77, 'upchars07');
  end;
end;
