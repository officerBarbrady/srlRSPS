//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--               ? Debug Routines                              --//
//-----------------------------------------------------------------//
// * procedure DebugBitmap(Bmp: Integer)`                         // by Cazax
// * function DebugTPA(Points: TPointArray; BmpName: String): Boolean; // by Wizzup?
// * function DebugATPA(Points: TPointArray; BmpName: String): Boolean; // by Wizzup?
// * procedure DebugATPABounds(aPoints: Array Of TPointArray);     // by Wizzup?, lordsaturn, & caused
const
  clRed = 255;
  clBlue = 16711738;
  clBlack = 0;
  clGreen = 32768;
  clYellow = 1953279;


{*******************************************************************************
Procedure DebugBitmap(Bmp: Integer);
By: Cazax
Description: Shows a bitmap in the debug image window.
*******************************************************************************}
procedure DebugBitmap(Bmp: Integer);
var
  W, H: Integer;
begin
  try
    GetBitmapSize(Bmp, W, H);
    DisplayDebugImgWindow(W, H);
    DrawBitmapDebugImg(Bmp);
  except
    writeLn('DebugBitmap Error in DebugBitmap');
  end;
end;

{*******************************************************************************
function DebugTPA(Points: TPointArray; BmpName: string): Boolean;
By: Wizzup?
Description: Shows an image of the Debug screen, plotting colors over the points
stored in Points TPA. If a name is specified, an image will be saved to that path.
*******************************************************************************}
function DebugTPA(Points: TPointArray; BmpName: string): Boolean;
var
  Bmp: integer;
  Box : TBox;
  TempTPA : TPointArray;
begin
  Box := GetTPABounds(Points);
  Bmp := BitmapFromClient(Box.x1,Box.y1,Box.x2,Box.y2);
  TempTPA := CopyTPA(Points);
  OffsetTPA(TempTPA,Point(-box.x1,-box.y1));
  DrawTPABitmap(Bmp,TempTPA,clRed);
  DisplayDebugImgWindow(box.x2-Box.x1 + 1, box.y2-box.y1 + 1);
  DrawBitmapDebugImg(Bmp);
  if bmpname <> '' then
    SaveBitmap(Bmp, ScriptPath + BmpName + '.bmp');
  FreeBitmap(Bmp);
  Result := True;
end;

{*******************************************************************************
function DebugATPA(aPoints: array of TPointArray; BmpName: string): Boolean;
By: Wizzup
Description: Shows an image of the client, plotting each TPA of the 2D point
             array aPoints. Each TPA is a different color. If a name is
             specified, an image will be saved.
*******************************************************************************}
function DebugATPA(aPoints: T2DPointArray; BmpName: string): Boolean;
var
   Width, Height, ClientBMP: Integer;
   ATPA : T2DPointArray;
   Box : TBox;
begin
  result := false;
  if length(aPoints) = 0 then
    exit;
  Box := GetATPABounds(aPoints);
  Width := box.x2 - box.x1 + 1;
  Height := box.y2 - box.y1 + 1;
  DisplayDebugImgWindow(Width, Height);
  ClientBMP := BitmapFromClient(box.x1,box.y1,box.x2,box.y2);
  ATPA := CopyATPA(aPoints);
  OffsetATPA(ATPA,point(-box.x1,-box.y1));
  DrawATPABitmap(ClientBMP,ATPA);
  DrawBitmapDebugImg(ClientBMP);
  if BmpName <> '' then
    SaveBitmap(ClientBMP, ScriptPath + BmpName + '.bmp');
  FreeBitmap(ClientBMP);
  Result := True;
end;

{*******************************************************************************
procedure DebugATPABounds(aPoints: Array Of TPointArray);
By: Wizzup?, lordsaturn, & caused
Description: Shows an image of the client, plotting each TPA's bounds as a box
             of different colour per TPA. If a name is specified, an image
             will be saved.
*******************************************************************************}
procedure DebugATPABounds(aPoints: array Of TPointArray);
var
  Width, Height, ClientBMP, I: Integer;
  B, Box: TBox;
  BoxColors : TIntegerArray;
  SelColor: Integer;
  x,y : integer;
  BMP : Integer;
begin
  Box := GetATPABounds(aPoints);
  Width := Box.X2 + 5;
  Height := Box.Y2 + 5;
  DisplayDebugImgWindow(Width, Height);
  BoxColors := [clRed, clBlue, clBlack, clGreen, clYellow];
  ClientBMP := BitmapFromClient(0,0,width-1,height-1);
  for i:= 0 to high(aPoints) do
  begin
    SelColor := BoxColors[Random(length(Boxcolors))];

    B := getTPABounds(aPoints[i]);
    for x := B.x1 to B.x2 do
    begin
      FastSetPixel(ClientBMP, x, b.y1, selColor)
      FastSetPixel(ClientBMP, x, B.y2, selColor)
    end;
    for y := B.y1 to B.y2 do
    begin
      FastSetPixel(ClientBMP, B.x1, y, selColor)
      FastSetPixel(ClientBMP, B.x2, y, selColor)
    end;

    BMP := BitmapFromText(inttostr(i),StatChars);
    FastReplaceColor(bmp,clblack,clyellow);
    FastReplaceColor(bmp,clwhite,clblack);
    SetTransparentColor(bmp,clYellow);
    FastDrawTransparent(B.x1 + 2, b.y1 + 2, bmp,clientbmp);
    FreeBitmap(BMP);
  end;
  DrawBitmapDebugImg(clientBMP);
  FreeBitmap(ClientBmp);
end;
